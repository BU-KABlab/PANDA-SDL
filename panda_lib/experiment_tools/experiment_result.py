"""Define the structure of the data generated by an experiment."""
from dataclasses import field
from decimal import Decimal
from pathlib import Path
from typing import List, Tuple

from pydantic import ConfigDict
from pydantic.dataclasses import dataclass


class ExperimentResultsRecord:
    """
    A class for representing a single entry in a result table.
    The table has columns:
    id,
    experiment_id,
    result_type,
    result_value
    """

    def __init__(
        self, experiment_id: int, result_type: str, result_value: str, context=None
    ):
        self.experiment_id = experiment_id
        self.result_type = result_type
        self.result_value = result_value
        self.context = context

    def __str__(self):
        return f"Experiment ID: {self.experiment_id}, Result Type: {self.result_type}, Result Value: {self.result_value}, Context: {self.context}"

    def __repr__(self):
        return f"ResultTableRecord({self.experiment_id}, {self.result_type}, {self.result_value}, {self.context})"

    def __eq__(self, other):
        return (
            self.experiment_id == other.experiment_id
            and self.result_type == other.result_type
            and self.result_value == other.result_value
            and self.context == other.context
        )

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return hash(
            (self.experiment_id, self.result_type, self.result_value, self.context)
        )

    def __iter__(self):
        yield self.experiment_id
        yield self.result_type
        yield self.result_value
        yield self.context

    def __list__(self):
        return [self.experiment_id, self.result_type, self.result_value, self.context]

@dataclass(config=ConfigDict(validate_assignment=True))
class ExperimentResult:
    """Define the data that is generated by an experiment"""

    experiment_id: int = None
    well_id: str = None
    ocp_ca_file: List[Tuple[Path, str]] = field(default_factory=list)
    ocp_ca_passed: List[Tuple[bool, str]] = field(default_factory=list)
    ocp_cv_file: List[Tuple[Path, str]] = field(default_factory=list)
    ocp_cv_passed: List[Tuple[bool, str]] = field(default_factory=list)
    ocp_cv_final_voltage: List[Tuple[Decimal, str]] = field(default_factory=list)
    ca_data_file: List[Tuple[Path, str]] = field(default_factory=list)
    cv_data_file: List[Tuple[Path, str]] = field(default_factory=list)
    image: List[Tuple[Path, str]] = field(default_factory=list)
    # deposition_plot_files: list[Path] = field(default_factory=list)
    # deposition_max_values: list[Decimal] = field(default_factory=list)
    # depsotion_min_values: list[Decimal] = field(default_factory=list)
    # characterization_plot_files: list[Path] = field(default_factory=list)
    # characterization_max_values: list[Decimal] = field(default_factory=list)
    # characterization_min_values: list[Decimal] = field(default_factory=list)
    pumping_record: list = None

    def set_ocp_ca_file(
        self, file: Path, passed: bool, final_voltage: Decimal, context: str = None
    ):
        """Set the file, the pass/fail status, and the final voltage"""
        self.ocp_ca_file.append((file, context))
        self.ocp_ca_passed.append((passed, context))
        self.ocp_cv_final_voltage.append((final_voltage, context))

    def set_ocp_cv_file(
        self, file: Path, passed: bool, final_voltage: Decimal, context: str = None
    ):
        """Set the file, the pass/fail status, and the final voltage"""
        self.ocp_cv_file.append((file, context))
        self.ocp_cv_passed.append((passed, context))
        self.ocp_cv_final_voltage.append((final_voltage, context))

    def set_ca_data_file(
        self,
        file: Path,
        # plot_file: Path = None,
        # max_value: Decimal = None,
        # min_value: Decimal = None,
        context: str = None,
    ):
        """Set the file, the plot file, the max value, and the min value"""
        self.ca_data_file.append((file, context))
        # if plot_file is not None:
        #     self.deposition_plot_files.append(plot_file)
        # if max_value is not None:
        #     self.deposition_max_values.append(max_value)
        # if min_value is not None:
        #     self.depsotion_min_values.append(min_value)

    def set_cv_data_file(
        self,
        file: Path,
        # plot_file: Path = None,
        # max_value: Decimal = None,
        # min_value: Decimal = None,
        context: str = None,
    ):
        """Set the file, the plot file, the max value, and the min value"""
        self.cv_data_file.append((file, context))
        # if plot_file is not None:
        #     self.characterization_plot_files.append(plot_file)
        # if max_value is not None:
        #     self.characterization_max_values.append(max_value)
        # if min_value is not None:
        #     self.characterization_min_values.append(min_value)

    def set_pumping_record(self, record: list):
        """Set the pumping record"""
        self.pumping_record = record

    def append_image_file(self, file: Path, context: str = None):
        """Append the image file"""
        self.image.append((file, context))

    def one_to_many(self) -> list[ExperimentResultsRecord]:
        """Turn the results object into individual result table records"""
        all_results = []
        for key, value in self.__dict__.items():
            if key in ["experiment_id", "well_id", "pumping_record"]:
                continue
            if isinstance(value, list):
                for _, item in enumerate(value):
                    all_results.append(
                        ExperimentResultsRecord(
                            self.experiment_id, key, item[0], item[1]
                        )
                    )
            else:
                all_results.append(
                    ExperimentResultsRecord(self.experiment_id, key, value)
                )
        return all_results

    def to_results_records(self) -> list[ExperimentResultsRecord]:
        """Turn the results object into individual result table records"""
        all_results = []
        for key, value in self.__dict__.items():
            if key in ["experiment_id", "well_id", "pumping_record"]:
                continue
            if isinstance(value, list):
                for _, item in enumerate(value):
                    all_results.append(
                        ExperimentResultsRecord(
                            self.experiment_id, key, item[0], item[1]
                        )
                    )
            else:
                all_results.append(
                    ExperimentResultsRecord(self.experiment_id, key, value)
                )
        return all_results

